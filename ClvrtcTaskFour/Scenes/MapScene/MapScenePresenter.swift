//
//  MapScenePresenter.swift
//  ClvrtcTaskFour
//
//  Created by Artyom Beldeiko on 21.01.23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MapScenePresentationLogic {
    func presentDataFromNetwork(response: MapScene.Data.Response)
    func presentDataFromDB(response: MapScene.Data.Response)
}

class MapScenePresenter: MapScenePresentationLogic {

    var viewModel = MapScene.Data.ViewModel()
    var atmData = [MKAnnotatedATM]()
    var branchBankData = [MKAnnotatedBranchBank]()
    var serviceTerminalData = [MKAnnotatedServiceTerminal]()
    var dbWorker = MapSceneDBWorker()
    
    weak var viewController: MapSceneDisplayLogic?

    
    func presentDataFromNetwork(response: MapScene.Data.Response) {
            for branchBankItem in response.branchBankData! {
                branchBankData.append(MKAnnotatedBranchBank(branchID: branchBankItem.branchId, name: branchBankItem.name, cbu: branchBankItem.cbu, equeue: branchBankItem.equeue, wifi: branchBankItem.wifi, streetName: branchBankItem.address.streetName, buildingNumber: branchBankItem.address.buildingNumber, department: branchBankItem.address.department, townName: branchBankItem.address.townName, addressLine: branchBankItem.address.addressLine, addressDescription: branchBankItem.address.description, latitude: branchBankItem.address.geoLocation.geographicCoordinates.latitude, longitude: branchBankItem.address.geoLocation.geographicCoordinates.longitude, standardAvailability:branchBankDatesFormatter(branchBankItem.information.availability.standardAvailability.day), currency: branchBankItem.services.currencyExchange.description))
            }
        
            for atmItem in response.atmData! {
                atmData.append(MKAnnotatedATM(atmID: atmItem.atmID, type: atmItem.type.rawValue, baseCurrency: atmItem.baseCurrency.rawValue, currency: atmItem.currency.rawValue, cards: cardsFormatter(atmItem.cards), currentStatus: atmItem.currentStatus.rawValue, streetName: atmItem.address.streetName, townName: atmItem.address.townName, buildingNumber: atmItem.address.buildingNumber, addressLine: atmItem.address.addressLine, addressDiscription: atmItem.address.addressDescription.rawValue, latitude: atmItem.address.geolocation.geographicCoordinates.latitude, longitude: atmItem.address.geolocation.geographicCoordinates.longitude, serviceType: servicesFormatter(atmItem.services), access24Hours: atmItem.availability.access24Hours, isRescticted: atmItem.availability.isRestricted, sameAsOrganization: atmItem.availability.sameAsOrganization, standardAvailability: atmDatesFormatter(atmItem.availability.standardAvailability.day), contactDetails: atmItem.contactDetails.phoneNumber))
            }
                    
            for serviceTerminalItem in response.serviceTerminalData! {
               serviceTerminalData.append(MKAnnotatedServiceTerminal(infoID: serviceTerminalItem.infoID, city: serviceTerminalItem.city, addressType: serviceTerminalItem.addressType.rawValue, address: serviceTerminalItem.address, house: serviceTerminalItem.house, installPlace: serviceTerminalItem.installPlace, locationNameDesc: serviceTerminalItem.locationNameDesc, workTime: serviceTerminalItem.workTime, timeLong: serviceTerminalItem.timeLong, gpsX: serviceTerminalItem.gpsX, gpsY: serviceTerminalItem.gpsY, currency: serviceTerminalItem.currency.rawValue, cashInExist: serviceTerminalItem.cashInExist.rawValue))
            }
        
        viewModel.MKAnnotatedATM = atmData
        viewModel.MKAnnotatedBranchBank = branchBankData
        viewModel.MKAnnotatedServiceTerminal = serviceTerminalData
        
        viewController?.displayData(ViewModel: viewModel)
        
        dbWorker.saveDataToDB()
    }
    
    func presentDataFromDB(response: MapScene.Data.Response) {
        viewModel.MKAnnotatedATM = response.annotatedATMData
        viewModel.MKAnnotatedBranchBank = response.annotatedBranchBankData
        viewModel.MKAnnotatedServiceTerminal = response.annotatedServiceTerminalData
        viewController?.displayData(ViewModel: viewModel)
    }
}
