//
//  MapSceneInteractor.swift
//  ClvrtcTaskFour
//
//  Created by Artyom Beldeiko on 21.01.23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MapSceneBusinessLogic {
    func fetchData(request: MapScene.Data.Request)
}

protocol MapSceneDataStore {
    var annotatedATMData: [MKAnnotatedATM] { get set }
    var annotatedBranchBankData: [MKAnnotatedBranchBank] { get set }
    var annotatedServiceTerminalData: [MKAnnotatedServiceTerminal] { get set }
    var annotatedFacilityData: [MKAnnotatedFacility] { get set }
}

class MapSceneInteractor: MapSceneBusinessLogic, MapSceneDataStore {
    var presenter: MapScenePresentationLogic?
    var dbWorker: MapSceneDBWorker?
    var response = MapScene.Data.Response()
    var annotatedATMData: [MKAnnotatedATM] = []
    var annotatedBranchBankData: [MKAnnotatedBranchBank] = []
    var annotatedServiceTerminalData: [MKAnnotatedServiceTerminal] = []
    var annotatedFacilityData: [MKAnnotatedFacility] = []
    var groupedFacilityData: [String: [MKAnnotatedFacility]] = [:]
    
    func fetchData(request: MapScene.Data.Request) {
        dbWorker = MapSceneDBWorker()
        
        var atmData = [ATM]()
        var branchBankData = [BankBranch]()
        var serviceTerminalData = [ServiceTerminal]()
        var facilityData = [MKAnnotatedFacility]()
        
        let dispatchGroup = DispatchGroup()
        //            let listVC = self.parent?.children[1] as? ATMViewController
        
        if Reachability.isConnectedToNetwork() {
            
            dispatchGroup.enter()
            NetworkManager.shared.getATMData { result in
                switch result {
                case .success(let data):
                    atmData = data.data.atm
                    
                case .failure(_):
                    DataPersistenceManager.shared.fetchingMKAnnotatedATMData { result in
                        switch result {
                        case .success(let atmData):
                            atmData.forEach { self.annotatedATMData.append(MKAnnotatedATM(atmID: $0.atmID!,
                                                                                          type: $0.type!,
                                                                                          baseCurrency: $0.baseCurrency!,
                                                                                          currency: $0.currency!,
                                                                                          cards: $0.cards!,
                                                                                          currentStatus: $0.currentStatus!,
                                                                                          streetName: $0.streetName!,
                                                                                          townName: $0.townName!,
                                                                                          buildingNumber: $0.buildingNumber!,
                                                                                          addressLine: $0.addressLine!,
                                                                                          addressDiscription: $0.addressDiscription!,
                                                                                          latitude: $0.latitude!,
                                                                                          longitude: $0.longitude!,
                                                                                          serviceType: $0.serviceType!,
                                                                                          access24Hours: $0.access24Hours,
                                                                                          isRescticted: $0.isRescticted,
                                                                                          sameAsOrganization: $0.sameAsOrganization,
                                                                                          standardAvailability: $0.standardAvailability!,
                                                                                          contactDetails: $0.contactDetails!)) }
                            
                            self.response.annotatedATMData = self.annotatedATMData
                            
                        case .failure(_): break
                        }
                    }
                }
                
                dispatchGroup.leave()
            }
            
            dispatchGroup.enter()
            NetworkManager.shared.getBranchBankData { result in
                switch result {
                case .success(let data):
                    branchBankData = data.data.branch
                    
                case .failure(_):
                    DataPersistenceManager.shared.fetchingMKAnnotatedBranchBankData { result in
                        switch result {
                        case .success(let branchBankData):
                            branchBankData.forEach { self.annotatedBranchBankData.append(MKAnnotatedBranchBank(branchID: $0.branchID!,
                                                                                                               name: $0.name!,
                                                                                                               cbu: $0.cbu!,
                                                                                                               equeue:  Int($0.equeue),
                                                                                                               wifi:  Int($0.wifi),
                                                                                                               streetName: $0.streetName!,
                                                                                                               buildingNumber: $0.buildingNumber!,
                                                                                                               department: $0.department!,
                                                                                                               townName: $0.townName!,
                                                                                                               addressLine: $0.addressLine!,
                                                                                                               addressDescription: $0.addressDescription!, latitude: $0.latitude!,
                                                                                                               longitude: $0.longitude!,
                                                                                                               standardAvailability: $0.standardAvailability!, currency: $0.currency!)) }
                            
                            self.response.annotatedBranchBankData = self.annotatedBranchBankData
                            
                        case .failure(_): break
                        }
                    }
                }
                
                dispatchGroup.leave()
            }
            
            dispatchGroup.enter()
            NetworkManager.shared.getServiceTerminalData { result in
                switch result {
                case .success(let data):
                    serviceTerminalData = data
                    
                case .failure(_):
                    DataPersistenceManager.shared.fetchingMKAnnotatedServiceTerminalData { result in
                        switch result {
                        case .success(let serviceTerminalData):
                            serviceTerminalData.forEach { self.annotatedServiceTerminalData.append(MKAnnotatedServiceTerminal(infoID: Int($0.infoID),
                                                                                                                              city: $0.city!,
                                                                                                                              addressType: $0.addressType!,
                                                                                                                              address: $0.address!,
                                                                                                                              house: $0.house!,
                                                                                                                              installPlace: $0.installPlace!,
                                                                                                                              locationNameDesc: $0.locationNameDesc!,
                                                                                                                              workTime: $0.workTime!,
                                                                                                                              timeLong: $0.timeLong!,
                                                                                                                              gpsX: $0.gpsX!,
                                                                                                                              gpsY: $0.gpsY!,
                                                                                                                              currency: $0.currency!,
                                                                                                                              cashInExist: $0.cashInExist!)) }
                            
                            self.response.annotatedServiceTerminalData = self.annotatedServiceTerminalData
                            
                        case .failure(_): break
                        }
                    }
                }
                
                dispatchGroup.leave()
            }
            
            dispatchGroup.notify(queue: .main) {
                
                for atmDataItem in atmData {
                    
                    facilityData.append(MKAnnotatedFacility(id: atmDataItem.atmID, currency: atmDataItem.currency.rawValue, townName: atmDataItem.address.townName, streetName: atmDataItem.address.streetName, buildingNumber: atmDataItem.address.buildingNumber, addressLine: atmDataItem.address.buildingNumber, availability: atmDatesFormatter(atmDataItem.availability.standardAvailability.day), latitude: Double(atmDataItem.address.geolocation.geographicCoordinates.latitude)!, longitude: Double(atmDataItem.address.geolocation.geographicCoordinates.longitude)!))
                }
                
                //                    self.annotatedATMData = self.annotatedATMData.sorted { $0.distance(to: self.currentLocation ?? self.defaultLocation) < $1.distance(to: self.currentLocation ?? self.defaultLocation) }
                
                for branchBankDataItem in branchBankData {
                    
                    facilityData.append(MKAnnotatedFacility(id: branchBankDataItem.branchId, currency: "", townName: branchBankDataItem.address.townName, streetName: branchBankDataItem.address.streetName, buildingNumber: branchBankDataItem.address.buildingNumber, addressLine: branchBankDataItem.address.addressLine, availability: branchBankDatesFormatter(branchBankDataItem.information.availability.standardAvailability.day), latitude: Double(branchBankDataItem.address.geoLocation.geographicCoordinates.latitude)!, longitude: Double(branchBankDataItem.address.geoLocation.geographicCoordinates.longitude)!))
                }
                
                //                    self.annotatedBranchBankData = self.annotatedBranchBankData.sorted { $0.distance(to: self.currentLocation ?? self.defaultLocation) < $1.distance(to: self.currentLocation ?? self.defaultLocation) }
                
                for serviceTerminalItem in serviceTerminalData {
                    
                    facilityData.append(MKAnnotatedFacility(id: serviceTerminalItem.infoID.description, currency: serviceTerminalItem.currency.rawValue, townName: serviceTerminalItem.city, streetName: serviceTerminalItem.address, buildingNumber: serviceTerminalItem.house, addressLine: serviceTerminalItem.locationNameDesc, availability: serviceTerminalItem.workTime, latitude: Double(serviceTerminalItem.gpsX)!, longitude: Double(serviceTerminalItem.gpsY)!))
                }
                
                self.response.atmData = atmData
                self.response.branchBankData = branchBankData
                self.response.serviceTerminalData = serviceTerminalData
                
                self.presenter?.presentDataFromNetwork(response: self.response)
                //                self.dbWorker?.saveDataToDB()
            }
        } else {
            
            DataPersistenceManager.shared.fetchingMKAnnotatedATMData { result in
                switch result {
                case .success(let atmData):
                    atmData.forEach { self.annotatedATMData.append(MKAnnotatedATM(atmID: $0.atmID!,
                                                                                  type: $0.type!,
                                                                                  baseCurrency: $0.baseCurrency!,
                                                                                  currency: $0.currency!,
                                                                                  cards: $0.cards!,
                                                                                  currentStatus: $0.currentStatus!,
                                                                                  streetName: $0.streetName!,
                                                                                  townName: $0.townName!,
                                                                                  buildingNumber: $0.buildingNumber!,
                                                                                  addressLine: $0.addressLine!,
                                                                                  addressDiscription: $0.addressDiscription!,
                                                                                  latitude: $0.latitude!,
                                                                                  longitude: $0.longitude!,
                                                                                  serviceType: $0.serviceType!,
                                                                                  access24Hours: $0.access24Hours,
                                                                                  isRescticted: $0.isRescticted,
                                                                                  sameAsOrganization: $0.sameAsOrganization,
                                                                                  standardAvailability: $0.standardAvailability!,
                                                                                  contactDetails: $0.contactDetails!)) }
                    
                    self.response.annotatedATMData = self.annotatedATMData
                    
                case .failure(_): break
                }
            }
            
            DataPersistenceManager.shared.fetchingMKAnnotatedBranchBankData { result in
                switch result {
                case .success(let branchBankData):
                    branchBankData.forEach { self.annotatedBranchBankData.append(MKAnnotatedBranchBank(branchID: $0.branchID!,
                                                                                                       name: $0.name!,
                                                                                                       cbu: $0.cbu!,
                                                                                                       equeue:  Int($0.equeue),
                                                                                                       wifi:  Int($0.wifi),
                                                                                                       streetName: $0.streetName!,
                                                                                                       buildingNumber: $0.buildingNumber!,
                                                                                                       department: $0.department!,
                                                                                                       townName: $0.townName!,
                                                                                                       addressLine: $0.addressLine!,
                                                                                                       addressDescription: $0.addressDescription!, latitude: $0.latitude!,
                                                                                                       longitude: $0.longitude!,
                                                                                                       standardAvailability: $0.standardAvailability!, currency: $0.currency!)) }
                    
                    self.response.annotatedBranchBankData = self.annotatedBranchBankData
                    
                case .failure(_): break
                }
            }
            
            DataPersistenceManager.shared.fetchingMKAnnotatedServiceTerminalData { result in
                switch result {
                case .success(let serviceTerminalData):
                    serviceTerminalData.forEach { self.annotatedServiceTerminalData.append(MKAnnotatedServiceTerminal(infoID: Int($0.infoID),
                                                                                                                      city: $0.city!,
                                                                                                                      addressType: $0.addressType!,
                                                                                                                      address: $0.address!,
                                                                                                                      house: $0.house!,
                                                                                                                      installPlace: $0.installPlace!,
                                                                                                                      locationNameDesc: $0.locationNameDesc!,
                                                                                                                      workTime: $0.workTime!,
                                                                                                                      timeLong: $0.timeLong!,
                                                                                                                      gpsX: $0.gpsX!,
                                                                                                                      gpsY: $0.gpsY!,
                                                                                                                      currency: $0.currency!,
                                                                                                                      cashInExist: $0.cashInExist!)) }
                    
                    self.response.annotatedServiceTerminalData = self.annotatedServiceTerminalData
                    
                case .failure(_): break
                }
            }
        }
    
        self.presenter?.presentDataFromDB(response: response)
        
    }
}

